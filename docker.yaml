---
- hosts: docker
  become: yes

  vars_files:
    - vars/main.yaml

  handlers:
    - name: Reboot
      reboot:

  tasks:
    - name: Ensure gpg keys are available
      dnf:
        update_cache: yes
        name:
          - distribution-gpg-keys

    - name: Import gpg keys for free and nonfree
      shell:
        cmd: |
          rpmkeys --import /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-free-fedora-{{ansible_distribution_major_version}}
          rpmkeys --import /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-nonfree-fedora-{{ansible_distribution_major_version}}

    - name: Enable the RPM Fusion free repository
      dnf:
        name: "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ansible_distribution_major_version}}.noarch.rpm"
        state: present

    - name: Enable the RPM Fusion nonfree repository
      dnf:
        name: "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ansible_distribution_major_version}}.noarch.rpm"
        state: present

    - name: Ensure dependencies are installed
      dnf:
        update_cache: yes
        name:
          - rpcbind
          - nfs-utils
          - docker
          - python-pip
          - python-setuptools
          - python-virtualenv
          - qemu-guest-agent
          - keepalived
          - ipset
          - libva-utils
          - intel-media-driver

    - name: Ensure python docker library is installed
      pip:
        name: docker

    - name: Ensure qemu-guest-agent daemon is started and enabled
      systemd:
        name: chronyd
        enabled: yes
        state: started


    - name: Ensure chronyd daemon is started and enabled
      systemd:
        name: chronyd
        enabled: yes
        state: started

    - name: Ensure docker daemon is started and enabled
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Give docker access to the docker volumes via SELinux
      command:
        cmd: chcon -Rt svirt_sandbox_file_t /mnt/docker

    - name: Give docker access to the docker socket via SELinux
      shell:
        cmd: |
          echo "Downloading docker socket policy"
          rpm-ostree install policycoreutils-python-utils
          echo "Need reboot"
          # need to reboot

          curl https://raw.githubusercontent.com/dpw/selinux-dockersock/master/dockersock.te -o /opt/dockersock.te

          echo "Applying policy to system"
          checkmodule -M -m -o dockersock.mod /opt/dockersock.te
          semodule_package -o dockersock.pp -m dockersock.mod
          sudo semodule -i dockersock.pp
        creates: /opt/dockersock.te
      notify:
        - Reboot

    - name: Include prometheus node exporter
      include_tasks: shared_tasks/prometheus_node_exporter.yaml

    - name: Ensure docker user is created
      user:
        name: docker

- hosts: docker01
  become: yes

  vars_files:
    - vars/main.yaml
    - vars/secrets.yaml

  handlers:
    - name: Restart Keepalived
      systemd:
        name: keepalived
        state: restarted

  tasks:
    - name: Ensure that the keepalived config is updated
      template:
        src: config/keepalived/docker01.j2
        dest: /etc/keepalived/keepalived.conf
      notify:
        - Restart Keepalived

    - name: Ensure keepalived daemon is started and enabled
      systemd:
        name: keepalived
        enabled: yes
        state: started

    - name: Ensure that the media NFS is mounted
      mount:
        src: 192.168.4.245:/volume1/k8s/media-server/plex/data/library
        path: /mnt/media
        opts: rw,sync,hard,nfsvers=4.1
        state: mounted
        fstype: nfs

    - name: Ensure that the portainer data directory exists
      file:
        path: /mnt/docker/volumes/portainer/data
        state: directory
        owner: docker
        group: users

    - name: Ensure that portainer container is created
      docker_container:
        name: portainer
        image: portainer/portainer-ee:2.15.1
        restart_policy: always
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/mnt/docker/volumes/portainer/data:/data"
        ports:
          - "8000:8000"
          - "9443:9443"

- hosts: docker02
  become: yes

  vars_files:
    - vars/main.yaml
    - vars/secrets.yaml

  handlers:
    - name: Restart Caddy
      docker_container:
        name: caddy
        state: started
        restart: yes

    - name: Restart Keepalived
      systemd:
        name: keepalived
        state: restarted

  tasks:
    - name: Ensure that the keepalived config is updated
      template:
        src: config/keepalived/docker02.j2
        dest: /etc/keepalived/keepalived.conf
      notify:
        - Restart Keepalived

    - name: Ensure keepalived daemon is started and enabled
      systemd:
        name: keepalived
        enabled: yes
        state: started

    - name: Ensure that the media NFS is mounted
      mount:
        src: 192.168.4.245:/volume1/k8s/media-server/plex/data/library
        path: /mnt/media
        opts: rw,sync,hard,nfsvers=4.1
        state: mounted
        fstype: nfs

    - name: Ensure that reverse proxy docker network is created
      docker_network:
        name: reverse_proxy

    - name: Ensure that the caddy data directory exists
      file:
        path: /mnt/docker/volumes/caddy/data
        state: directory
        owner: docker
        group: users

    - name: Ensure that the caddy config directory exists
      file:
        path: /mnt/docker/volumes/caddy/config
        state: directory
        owner: docker
        group: users

    - name: Ensure the caddyfile is up to date
      template:
        src: config/Caddyfile.j2
        dest: /mnt/docker/volumes/caddy/Caddyfile
      notify:
        - Restart Caddy

    - name: Ensure that caddy container is created
      docker_container:
        name: caddy
        image: bloveless/caddy:2.5.2-0.1.0
        restart_policy: always
        networks:
          - name: reverse_proxy
        volumes:
          - "/mnt/docker/volumes/caddy/Caddyfile:/etc/caddy/Caddyfile"
          - "/mnt/docker/volumes/caddy/data:/data"
          - "/mnt/docker/volumes/caddy/config:/config"
        ports:
          - "80:80"
          - "443:443"
          - "443:443/udp"
          - "8090:8090"

    - name: Ensure cloudflared container is created
      docker_container:
        name: cloudflared
        image: cloudflare/cloudflared:2022.10.0-amd64
        command: "tunnel --metrics 0.0.0.0:8099 run --token {{ cloudflared_key }}"
        restart_policy: always
        ports:
          - "8099:8099"
        networks:
          - name: reverse_proxy

    - name: Ensure that the fileflows volume Data directory exists
      file:
        path: /mnt/docker/volumes/fileflows/Data
        state: directory
        owner: docker
        group: users

    - name: Ensure that the fileflows volume Logs directory exists
      file:
        path: /mnt/docker/volumes/fileflows/Logs
        state: directory
        owner: docker
        group: users

    - name: Ensure that the fileflows volume Temp directory exists
      file:
        path: /mnt/docker/volumes/fileflows/Temp
        state: directory
        owner: docker
        group: users

    - name: Ensure that the fileflows server docker container is running
      docker_container:
        name: fileflows01
        hostname: fileflows01
        image: "revenz/fileflows:{{ fileflows_tag }}"
        ports:
          - 5000:5000
        volumes:
          - /mnt/docker/volumes/fileflows/Data:/app/Data
          - /mnt/docker/volumes/fileflows/Logs:/app/Logs
          - /mnt/docker/volumes/fileflows/Temp:/app/Temp
          - /mnt/media:/mnt/media
        devices:
          - /dev/dri:/dev/dri
        restart_policy: unless-stopped

    - name: Ensure that the fenrus data directory exists
      file:
        path: /mnt/docker/volumes/fenrus/data
        state: directory
        owner: docker
        group: users

    - name: Ensure that the fenrus images directory exists
      file:
        path: /mnt/docker/volumes/fenrus/images
        state: directory
        owner: docker
        group: users

    - name: Ensure that fenrus container is created
      docker_container:
        name: fenrus
        image: revenz/fenrus:latest
        pull: true
        restart_policy: always
        env:
          TZ: America/Los_Angeles
        volumes:
          - "/mnt/docker/volumes/fenrus/data:/app/data"
          - "/mnt/docker/volumes/fenrus/images:/app/wwwroot/images"
        ports:
          - "3000:3000"

- hosts: docker03
  become: yes

  vars_files:
    - vars/main.yaml
    - vars/secrets.yaml

  handlers:
    - name: Restart Keepalived
      systemd:
        name: keepalived
        state: restarted

  tasks:
    - name: Ensure that the keepalived config is updated
      template:
        src: config/keepalived/docker03.j2
        dest: /etc/keepalived/keepalived.conf
      notify:
        - Restart Keepalived

    - name: Ensure keepalived daemon is started and enabled
      systemd:
        name: keepalived
        enabled: yes
        state: started

    - name: Ensure that the media NFS is mounted
      mount:
        src: 192.168.4.245:/volume1/k8s/media-server/plex/data/library
        path: /mnt/media
        opts: rw,sync,hard,nfsvers=4.1
        state: mounted
        fstype: nfs

    - name: Ensure that the tiddlywiki volume directory exists
      file:
        path: /mnt/docker/volumes/tiddlywiki/data
        state: directory
        owner: docker
        group: users

    - name: Ensure that tiddlywiki container is created
      docker_container:
        name: tiddlywiki
        image: bloveless/tiddlywiki:5.2.3-0.1.0
        restart_policy: always
        volumes:
          - "/mnt/docker/volumes/tiddlywiki/data:/tiddlywiki"
        ports:
          - "8080:8080"

    - name: Ensure that the fileflows volume Data directory exists
      file:
        path: /mnt/docker/volumes/fileflows/Data
        state: directory
        owner: docker
        group: users

    - name: Ensure that the fileflows volume Logs directory exists
      file:
        path: /mnt/docker/volumes/fileflows/Logs
        state: directory
        owner: docker
        group: users

    - name: Ensure that the fileflows volume Temp directory exists
      file:
        path: /mnt/docker/volumes/fileflows/Temp
        state: directory
        owner: docker
        group: users

    - name: Ensure that the fileflows node docker container is running
      docker_container:
        name: fileflows02
        hostname: fileflows02
        image: "revenz/fileflows:{{ fileflows_tag }}"
        env:
          FFNODE: "1"
          ServerUrl: "http://{{ fileflows_server_address }}"
        ports:
          - 5000:5000
        volumes:
          - /mnt/docker/volumes/fileflows/Data:/app/Data
          - /mnt/docker/volumes/fileflows/Logs:/app/Logs
          - /mnt/docker/volumes/fileflows/Temp:/app/Temp
          - /mnt/media:/mnt/media
        devices:
          - /dev/dri:/dev/dri
        restart_policy: unless-stopped

    - name: Ensure that homelab exporter container is running
      docker_container:
        name: homelab-exporter
        image: bloveless/homelab-exporter:0.1.0
        ports:
          - 2112:8080
        restart_policy: unless-stopped

